// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dst with array should be replaced 1`] = `
"{
    a: string;
}"
`;

exports[`dts 1`] = `
"{
    auto: string;
    cover: string;
    contain: string;
}"
`;

exports[`dts ignore DEFAULT 1`] = `
"{
    1: StyleObject<{}>;
    none: StyleObject<{}>;
    sm: StyleObject<{}>;
    md: StyleObject<{}>;
    lg: StyleObject<{}>;
    xl: StyleObject<{}>;
    xxl: StyleObject<{}>;
    xxxl: StyleObject<{}>;
    full: StyleObject<{}>;
}"
`;

exports[`dts nested 1`] = `
"{
    auto: string;
    none: string;
    pan: {
        x: string;
        y: string;
        left: string;
        right: string;
        up: string;
        down: string;
    };
    \\"pinch-zoom\\": string;
    manipulation: string;
}"
`;

exports[`dts nested 2`] = `
"{
    a: {
        b: {
            c: {
                d: string;
            };
        };
    };
}"
`;

exports[`dts number and string 1`] = `
"{
    2: string;
    $: string;
    1.5: string;
    \\"dts-test\\": string;
}"
`;

exports[`dts with default type 1`] = `
"{
    auto: StyleObject<{}>;
    none: StyleObject<{}>;
    pan: {
        x: StyleObject<{}>;
        y: StyleObject<{}>;
        left: StyleObject<{}>;
        right: StyleObject<{}>;
        up: StyleObject<{}>;
        down: StyleObject<{}>;
    };
    \\"pinch-zoom\\": StyleObject<{}>;
    manipulation: StyleObject<{}>;
}"
`;

exports[`generate dts 1`] = `
"import { buildLinearGradient, buildTransition } from \\"@windijs/core\\";
export declare const image: {
  render: Inject<{
      auto: StyleObject<{}>;
      pixel: StyleObject<{}>;
      edge: StyleObject<{}>;
  }, {
    auto: StyleObject<{}>;
    pixel: StyleObject<{}>;
    edge: StyleObject<{}>;
}>;
};
export declare const fill: Inject<{}, {
    blue: {
        50: StyleObject<{opacity: (op: number) => StyleObject<{readonly gradient: StyleObject<{}>}>; readonly gradient: StyleObject<{}>}>;
        100: StyleObject<{opacity: (op: number) => StyleObject<{readonly gradient: StyleObject<{}>}>; readonly gradient: StyleObject<{}>}>;
    };
    cyan: {
        50: StyleObject<{opacity: (op: number) => StyleObject<{readonly gradient: StyleObject<{}>}>; readonly gradient: StyleObject<{}>}>;
        100: StyleObject<{opacity: (op: number) => StyleObject<{readonly gradient: StyleObject<{}>}>; readonly gradient: StyleObject<{}>}>;
        200: StyleObject<{opacity: (op: number) => StyleObject<{readonly gradient: StyleObject<{}>}>; readonly gradient: StyleObject<{}>}>;
    };
}>;
export declare const colors: Inject<{}, {
    blue: {
        50: string;
        100: string;
    };
    cyan: {
        50: string;
        100: string;
        200: string;
    };
}>;
"
`;

exports[`generate js 1`] = `
"'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@windijs/core');
var config = require('@windijs/config');
var helpers = require('@windijs/helpers');
var colors$1 = require('@windijs/colors');


const listStyleTypeWindiConfigInject = {\\"a\\":1,\\"b\\":2};
const overflowWindiConfigInject = {\\"c\\":3,\\"d\\":4};
const colorsWindiConfigInject = {\\"red\\":\\"#ff0\\"};
const animate = core.createUtility(\\"animate\\")
    .use(core.animateHandler(\\"none\\", \\"none\\"))
    .use(core.animateHandler(\\"spin\\", \\"spin 1s linear infinite\\", config.spinKeyframes))
    .use(core.animateHandler(\\"ping\\", \\"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite\\", config.pingKeyframes))
    .use(core.animateHandler(\\"pulse\\", \\"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\\", config.pulseKeyframes))
    .init();

const colors = colorsWindiConfigInject;

const image = core.createUtility(\\"image\\")
    .case(\\"render\\", core.configHandler(config.imageRenderingConfig, core.buildImageRendering))
    .init();
const list = core.createUtility(\\"list\\")
    .use(core.configHandler(listStyleTypeWindiConfigInject, \\"listStyleType\\"))
    .use(core.configHandler(config.listStylePositionConfig, \\"listStylePosition\\"))
    .init();
const overflow = core.createUtility(\\"overflow\\")
    .use(core.configHandler(overflowWindiConfigInject, \\"overflow\\"))
    .case(\\"truncate\\", core.cssHandler({ overflow: \\"hidden\\", \\"-o-text-overflow\\": \\"ellipsis\\", textOverflow: \\"ellipsis\\", whiteSpace: \\"nowrap\\" }))
    .case(\\"ellipsis\\", core.cssHandler({ \\"-o-text-overflow\\": \\"ellipsis\\", textOverflow: \\"ellipsis\\" }))
    .case(\\"x\\", core.configHandler(overflowWindiConfigInject, \\"overflowX\\"))
    .case(\\"y\\", core.configHandler(overflowWindiConfigInject, \\"overflowY\\"))
    .init();
  "
`;
