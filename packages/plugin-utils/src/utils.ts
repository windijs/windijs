import { existsSync, readFileSync, rmSync, writeFileSync } from "fs";

import { resolve } from "path";

export const configPath = resolve("./windi.config");

export const replaceEntry = (input: string) => input.replace(/@windijs\/(core|colors|helpers|config|shared)/g, "windijs");

export const filterConflict = (src: string, entries: string[]) => entries.filter(i => !src.match(new RegExp(`(const|let|var)\\s+${i}\\s*=`)));

export const injectImports = (code: string, imports: Record<string, string[]>) => Object.entries(imports).map(([k, v]) => `import { ${v.join(", ")} } from '${k}';\n`).join("") + code;

export const injectConfig = (code: string) => `import windiUserConfig from '${configPath}';\n` + code;

export const injectHelper = (code: string, helper: string) => code.includes(helper) ? code : injectImports(code, { windijs: [helper] });

export const declModule = (name: string, contents: string | string[]) => `declare module '${name}' {\n` + (Array.isArray(contents) ? contents.map(i => "  " + i + ";\n").join("") : contents) + "}\n";

export const writeFile = (path: string, content: string | undefined) => {
  if (content) writeFileSync(path, "// This file was auto generated by windijs, you can put it into your `.gitignore`, please do not edit it directly.\n" + content);
  else if (existsSync(path)) rmSync(path);
};

export function readModule (name: string) {
  const pkg = JSON.parse(readFileSync(`./node_modules/${name}/package.json`).toString());
  const dts = readFileSync(`./node_modules/${name}/${pkg.types}`).toString();
  const mjs = readFileSync(`./node_modules/${name}/${pkg.module}`).toString();
  return { pkg, dts, mjs };
}
