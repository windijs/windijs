/* eslint-disable no-console */
import { cssData, EntryStatus, IPropertyData, IReference, IValueData } from "./webCustomData";
import { writeFileSync } from "fs";

function dashToCamel (str: string) {
  if (/^-(webkit|ms|moz|o)-/.test(str) || str === "scrollbar-3dlight-color") return JSON.stringify(str);
  return str.replace(/(-[a-z])/g, function ($1) { return $1.toUpperCase().replace("-", ""); });
}

function indent (str: string, count = 2) {
  return " ".repeat(count) + str;
}

function escape (str: string) {
  return str.replace(/</g, "\\<");
}

function doc (str: string[], indentCount = 0): string | undefined {
  if (str.length === 0) return undefined;
  if (str.length === 1) return indent("/** " + escape(str[0]) + " */", indentCount);
  return [indent("/**", indentCount), ...str.map(i => i === "" ? indent(" *", indentCount) : indent(" * " + escape(i).trim(), indentCount)), indent(" */", indentCount)].join("\n");
}

function genBrower (browser: string): string | undefined {
  if (browser[0] === "E") return browser.replace("E", "Edge ");
  if (browser[0] === "F") return browser.replace("FF", "Firefox ");
  if (browser[0] === "S") return browser.replace("S", "Safari ");
  if (browser[0] === "C") return browser.replace("C", "Chrome ");
  if (browser[0] === "O") return browser.replace("O", "Opera ");
}

function genBrowers (browsers: string[] | undefined): string | undefined {
  if (!browsers) return undefined;
  return "(" + browsers.map(i => genBrower(i)).filter(i => i != null).join(", ") + ")";
}

function genSyntax (syntax: string | undefined) {
  if (!syntax) return undefined;
  return "Syntax: " + syntax;
}

function genReference (ref: IReference) {
  return `[${ref.name}](${ref.url})`;
}

function genReferences (refs: IReference[] | undefined): string[] | undefined {
  if (!refs) return undefined;
  return refs.map(i => genReference(i));
}

function genStatus (status: EntryStatus | undefined): string | undefined {
  if (status === "nonstandard") return "🚨️ Property is nonstandard. Avoid using it.";
  if (status === "experimental") return "⚠️ Property is experimental. Be cautious when using it.️";
  if (status === "obsolete") return "🚨️️️ Property is obsolete. Avoid using it.";
  return undefined;
}

function genPropertyDoc (prop: IPropertyData, indent = 0): string | undefined {
  const docs: (string | undefined)[] = [
    genStatus(prop.status),
    prop.description,
    genBrowers(prop.browsers),
    genSyntax(prop.syntax),
    ...(genReferences(prop.references) ?? []),
  ];

  return doc(docs.filter(i => i != null).map(i => [i, ""]).flat().slice(0, -1) as string[], indent);
}

function genValueDoc (value: IValueData, indent = 0): string | undefined {
  const docs: (string | undefined)[] = [
    genStatus(value.status),
    value.description,
    genBrowers(value.browsers),
    ...(genReferences(value.references) ?? []),
  ];

  return doc(docs.filter(i => i != null).map(i => [i, ""]).flat().slice(0, -1) as string[], indent);
}

function genEndTypes (prop: IPropertyData, all = false): string {
  const ends = ["}"];
  // TODO: handle more restrictions, like length, percentage..., maybe return func like fontSize.rem(1) || fontSize.rem[1] || fontSize.percent[10]
  if (prop.restrictions?.includes("color")) {
    ends.push("{ [k in CSSColors]: StyleObject }");
  }
  if (!all) ends.push("{ [key: string]: StyleObject }");
  return ends.join(" & ");
}

const codes: string[] = [];

console.log("Start generating...\n");

codes.push(doc(["This file is auto generated by 'pnpm gen:style'. Please don't edit it directly.", ""])!);

codes.push("import { StyleObject, CSSColors } from \"./index\";");
codes.push("");
codes.push("export interface CSSStyleData {");

let d, values, all;

for (const p of cssData.properties) {
  all = false;
  values = p.values ?? [];
  d = genPropertyDoc(p, 2);
  if (d) codes.push(d);
  codes.push(indent(dashToCamel(p.name) + ": {"));
  if (values.length === 0) {
    all = true;
    codes.push(indent("[key: string]: StyleObject", 4));
  } else {
    for (const v of values) {
      d = genValueDoc(v, 4);
      if (d) codes.push(d);
      codes.push(indent(JSON.stringify(v.name) + ": StyleObject,", 4));
    }
  }
  codes.push(indent(genEndTypes(p, all)));
}

codes.push("}");
codes.push("");

console.log("Write to ./src/types/style.d.ts\n");

writeFileSync("./src/types/style.d.ts", codes.join("\n"));

console.log("Done.\n");
